version: 2.1
orbs:
  slack: circleci/slack@4.1

parameters:
  workflow_id:
    type: string
    default: '${CIRCLE_WORKFLOW_ID}'

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >>"
            aws cloudformation delete-stack \
              --stack-name prometheus-<<parameters.workflow_id>>
            aws cloudformation delete-stack \
              --stack-name cloudfront-<<parameters.workflow_id>>
            aws cloudformation delete-stack \
              --stack-name database-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-$(<<parameters.workflow_id>>:0:5) --recursive
            aws cloudformation delete-stack \
              --stack-name starter-frontend-<<parameters.workflow_id>>
            aws cloudformation delete-stack \
              --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack \
              --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          # Add when this will run
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/ViWzkdySLpmD9TMMzU5Fzq/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if (($SUCCESS == 1))
            then
              cd ~/project/backend
              npm install 
              npm run build
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install > /dev/null
            npm run build > /dev/null
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install > /dev/null
            npm run build > /dev/null
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
  
  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      # Restore from cache
      # - restore_cache:
      #     keys: [frontend-build]
      # Your job code here
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm install > /dev/null
            npm run test
  
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      # Restore from cache
      # - restore_cache:
      #     keys: [backend-build]
      # Your job code here
      - run:
          name: Test backend
          command: |
            cd backend
            npm install > /dev/null
            npm run test
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      # Restore from cache
      # - restore_cache:
      #     keys: [frontend-build]
      # Your job code here
      - run:
          name: Analyse frontend
          command: |
            cd frontend
            npm install > /dev/null
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      # Restore from cache
      # - restore_cache:
      #     keys: [backend-build]
      # Your job code here
      - run:
          name: Analyse backend
          command: |
            cd backend
            npm install
            npm audit fix 
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
               --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
               --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
               --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
               --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo $(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text) >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.10-alpine3.16
      # - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["06:55:19:5c:75:9c:0c:fa:5e:f0:ed:c4:2b:35:ec:76"]
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli ansible curl 
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: | 
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml


      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install deps
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |      
            cd backend
            npm install 
            npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force
            npm run build  
            npm run migrations >> migrations.txt
      - run: 
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully" ~/project/backend/migrations.txt
            then
              curl --insecure https://kvdb.io/ViWzkdySLpmD9TMMzU5Fzq/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      

 
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      # - image: amazon/aws-cli
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # - attach_workspace:
      #     at: ~/
      - run:
          name: Install deps
          command: |
            apk add --update --no-cache tar gzip nodejs npm ansible curl aws-cli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - restore_cache:
          keys: [frontend-build]

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build 
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist 2>/dev/null
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - '06:55:19:5c:75:9c:0c:fa:5e:f0:ed:c4:2b:35:ec:76'
      
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli ansible curl
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install 
            npm audit fix --audit-level=critical --force
            npm run build 
            cd ..
            tar -C backend -czvf artifact.tar.gz . 
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            cat inventory.txt
           
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


workflows:
  default:
    jobs:
      # - build-frontend:
      #     filters:
      #       branches:
      #         only: [master, dev-branch]
      # - build-backend:
      #     filters:
      #       branches:
      #         only: [master, dev-branch]
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master, dev-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations
          # requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend, deploy-database]
      # - cloudfront-update:
      #     requires: [blue-frontend, smoke-test]
      # - add-prometheus-node-exporter:
      #     requires: [smoke-test]
      # - approve:
      #     type: approval
      #     requires: [cloudfront-update, add-prometheus-node-exporter]
      # - cleanup:
      #     requires: [approve]
      # - destroy-all:
      #     requires:
      #       - blue-frontend
      #       - deploy-database
      #       - deploy-prometheus-monitor
      #       - cleanup
      #     filters:
      #       branches:
      #         only: [master, dev-branch]
