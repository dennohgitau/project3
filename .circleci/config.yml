version: 2.1
orbs:
  slack: circleci/slack@4.1

parameters:
  workflow_id:
    type: string
    default: '${CIRCLE_WORKFLOW_ID}'

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >>"
            aws cloudformation delete-stack \
              --stack-name prometheus-<<parameters.workflow_id>>
            aws cloudformation delete-stack \
              --stack-name cloudfront-<<parameters.workflow_id>>
            aws cloudformation delete-stack \
              --stack-name database-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-$(<<parameters.workflow_id>>:0:5) --recursive
            aws cloudformation delete-stack \
              --stack-name starter-frontend-<<parameters.workflow_id>>
            aws cloudformation delete-stack \
              --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack \
              --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          # Add when this will run
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/ViWzkdySLpmD9TMMzU5Fzq/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if (($SUCCESS == 1))
            then
              cd ~/project/backend
              npm install > /dev/null
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install > /dev/null
            npm run build > /dev/null
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install > /dev/null
            npm run build > /dev/null
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
  
  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      # Restore from cache
      # - restore_cache:
      #     keys: [frontend-build]
      # Your job code here
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm install > /dev/null
            npm run test
  
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      # Restore from cache
      # - restore_cache:
      #     keys: [backend-build]
      # Your job code here
      - run:
          name: Test backend
          command: |
            cd backend
            npm install > /dev/null
            npm run test

workflows:
  default:
    jobs:
      - build-frontend:
          filters:
            branches:
              only: [master, dev-branch]
      - build-backend:
          filters:
            branches:
              only: [master, dev-branch]
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master, dev-branch]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires:
      #       - deploy-database
      #       - configure-infrastructure
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend, deploy-database]
      # - cloudfront-update:
      #     requires: [blue-frontend, smoke-test]
      # - add-prometheus-node-exporter:
      #     requires: [smoke-test]
      # - approve:
      #     type: approval
      #     requires: [cloudfront-update, add-prometheus-node-exporter]
      # - cleanup:
      #     requires: [approve]
      # - destroy-all:
      #     requires:
      #       - blue-frontend
      #       - deploy-database
      #       - deploy-prometheus-monitor
      #       - cleanup
      #     filters:
      #       branches:
      #         only: [master, dev-branch]
